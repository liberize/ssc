#!/bin/sh

while [ -n "$1" ]; do
  case "$1" in
    -4|--rc4)               ;;    # keep for compatibility
    -u|--untraceable)       CXXFLAGS="$CXXFLAGS -DUNTRACEABLE";;
    -s|--static)            STATIC=1; CXXFLAGS="$CXXFLAGS -static -static-libgcc -static-libstdc++";;
    -r|--random-key)        RAND_KEY=1; CXXFLAGS="$CXXFLAGS -DOBFUSCATE_KEY=$(perl -e 'print int(rand(127))+1')";;
    -i|--interpreter)       CXXFLAGS="$CXXFLAGS -DINTERPRETER=$2"; shift;;
    -e|--embed-interpreter) EMBED_FILE="$2"; CXXFLAGS="$CXXFLAGS -DEMBED_INTERPRETER_NAME=$2"; shift;;
    -E|--embed-archive)     EMBED_FILE="$2"; CXXFLAGS="$CXXFLAGS -DEMBED_ARCHIVE"; LDFLAGS="$LDFLAGS -lz"; shift;;
    -M|--mount-squashfs)    SQUASHFS_DATA="$2"; CXXFLAGS="$CXXFLAGS -DMOUNT_SQUASHFS -pthread"; LDFLAGS="$LDFLAGS squashfuse/.libs/*.a -lz -ldl"; PTHREAD=1; shift;;
    -0|--fix-argv0)         CXXFLAGS="$CXXFLAGS -DFIX_ARGV0";;
    -n|--ps-name)           CXXFLAGS="$CXXFLAGS -DPS_NAME=$2"; shift;;
    -d|--expire-date)       CXXFLAGS="$CXXFLAGS -DEXPIRE_DATE=$2"; shift;;
    -m|--expire-message)    EXPIRE_MESSAGE="$2"; shift;;
    -S|--segment)           SEGMENT="$2"; shift;;
    -c|--verify-checksum)   VERIFY_CHECKSUM=1; CXXFLAGS="$CXXFLAGS -DVERIFY_CHECKSUM";;
    -v|--verbose)           set -x; CXXFLAGS="$CXXFLAGS -v";;
    -h|--help)              SHOW_USAGE=1;;
    -*|--*)                 echo "Unknown option $1"; exit 1;;
    *)                      POSITIONAL_ARGS="$POSITIONAL_ARGS \"$1\"";;
  esac
  shift
done
eval set -- $POSITIONAL_ARGS
if [ -n "$SHOW_USAGE" -o  $# != 2 ]; then
  echo "Usage: $0 [-u] [-s] [-r] [-e|-E|-M file] [-0] [-d date] [-m msg] [-S N] <script> <binary>"
  echo "  -u, --untraceable        make untraceable binary"
  echo "                           enable debugger detection, abort program when debugger is found"
  echo "  -s, --static             make static binary"
  echo "                           link statically, binary is more portable but bigger"
  echo "  -r, --random-key         use random key for rc4 encryption"
  echo "  -i, --interpreter        override interpreter path"
  echo "                           the interpreter will be used no matter what shebang is"
  echo "  -e, --embed-interpreter  embed specified interpreter into binary"
  echo "                           the interpreter will be used no matter what shebang is"
  echo "  -E, --embed-archive      embed specified tar.gz archive into binary"
  echo "                           set relative path in shebang to use an interpreter in the archive"
  echo "  -M, --mount-squashfs     append specified gzipped squashfs to binary and mount it at runtime"
  echo "                           linux only, works like AppImage. if a directory is specified, create squashfs from it"
  echo "  -0, --fix-argv0          try to fix \$0, may not work"
  echo "                           if it doesn't work or causes problems, try -n flag or use \$SSC_ARGV0 instead"
  echo "  -n, --ps-name            change script path in ps output"
  echo "                           upon execution, create a symlink to real path and pass it to the interperter"
  echo "  -d, --expire-date        expire date, for example, 11/30/2023"
  echo "  -m, --expire-message     expire message, default to 'script has expired!'"
  echo "                           if a valid file path is specified, read message from the file"
  echo "  -S, --segment            split script to multiple segments, default to 1"
  echo "                           upon execution, decrypt and write script segment by segment, check for debugger before each segment"
  echo "  -c, --verify-checksum    verify crc32 checksum of the binary at runtime"
  echo "  -v, --verbose            show debug messages"
  echo "  -h, --help               display this help and exit"
  exit 0
fi

DIR="$(dirname "$0")/src"
[ -z "$CXX"   ] && CXX=${CROSS_COMPILE}g++
[ -z "$LD"    ] && LD=${CROSS_COMPILE}ld
[ -z "$STRIP" ] && STRIP=${CROSS_COMPILE}strip

ARCH="$($CXX -dumpmachine)"
ARCH="${ARCH%%-*}"

CXXFLAGS="$CXXFLAGS -w -O3"
CXX_STANDARD=c++14
case "$(uname -s)" in
  Linux*)       SYSTEM=Linux; [ -x "$(command -v termux-info)" ] && SYSTEM=Termux;;
  Darwin*)      SYSTEM=Mac;;
  CYGWIN*)      SYSTEM=Cygwin; CXX_STANDARD=gnu++14;;
  FreeBSD*)     SYSTEM=FreeBSD;;
  MINGW*|MSYS*) echo "please use cygwin"; exit 1;;
  *)            echo "unsupported system"; exit 1;;
esac

if [ "$SYSTEM" = Termux ]; then
  LDFLAGS="$LDFLAGS -landroid-wordexp"
  if [ "$STATIC" = 1 ]; then
    CXXFLAGS="$CXXFLAGS -ffunction-sections -fdata-sections"
    LDFLAGS="$LDFLAGS -Wl,--gc-sections"
  fi
fi

if [ "$PTHREAD" = 1 -a "$STATIC" = 1 ]; then
  if [ "$SYSTEM" = Linux ]; then
    # https://stackoverflow.com/questions/35116327/when-g-static-link-pthread-cause-segmentation-fault-why
    LDFLAGS="$LDFLAGS -Wl,--whole-archive -lpthread -Wl,--no-whole-archive"
  elif [ "$SYSTEM" = FreeBSD ]; then
    # https://bugs.freebsd.org/bugzilla/show_bug.cgi?id=273398
    LDFLAGS="$LDFLAGS -Wl,--eh-frame-hdr"
  fi
fi

if [ "$SYSTEM" != Cygwin -a "$SYSTEM" != Mac ]; then
  LDFLAGS="$LDFLAGS -Wl,-z,noexecstack"
fi

# build squashfuse if necessary
if [ -n "$SQUASHFS_DATA" -a ! -f squashfuse/.libs/libsquashfuse_ll.a ]; then
  echo '=> build squashfuse...'
  [ -d squashfuse ] || git clone --depth=1 https://github.com/liberize/squashfuse || exit
  cd squashfuse
  ./autogen.sh || exit
  sed -i "/PKG_CHECK_MODULES.*/,/,:./d" configure
  ./configure --disable-demo --disable-high-level --without-lzo --without-lz4 --without-xz || exit
  make -j $(nproc) || exit
  cd ..
fi

b2o() {
  if [ "$SYSTEM" = Mac ]; then
    touch stub.cpp
    $CXX -o stub.o -c stub.cpp
    $LD -r -o $1.o -sectcreate binary $1 $1 stub.o || return 1
    rm -f stub.cpp stub.o
  elif [ "$SYSTEM" = FreeBSD ]; then
    $LD -r -b binary -m elf_${ARCH}_fbsd -o $1.o $1 || return 1
  else
    $LD -r -b binary -o $1.o $1 || return 1
  fi
  return 0
}

if [ "$(head -c2 "$1")" = "#!" ]; then
  SHEBANG="$(head -n1 "$1")"
  SHEBANG_LEN="$(head -n1 "$1" | wc -c)"
fi

# cleanup on exit
trap "rm -f \"$1.cpp\" i.o i s.o s rc4 crc32 d.squashfs" EXIT

echo '=> build rc4 tool...'
[ -n "$RAND_KEY" ] && RC4_KEY="$(perl -e 'printf("%x", rand 16) for 1..8')" || RC4_KEY=ssc@2024
CXXFLAGS="$CXXFLAGS -DRC4_KEY=$RC4_KEY"
g++ -std=$CXX_STANDARD -w "$DIR/rc4.cpp" -o rc4 || exit 1

echo '=> encrypt script...'
[ -n "$SEGMENT" ] || SEGMENT=1
CXXFLAGS="$CXXFLAGS -DSEGMENT=$SEGMENT"
./rc4 "$1" s "$RC4_KEY" "$SEGMENT" "$SHEBANG_LEN" || exit 1
b2o s || exit 1
LDFLAGS="$LDFLAGS s.o"

if [ -n "$EMBED_FILE" ]; then
  echo '=> encrypt file for embedding...'
  ./rc4 "$EMBED_FILE" i "$RC4_KEY" || exit 1
  b2o i || exit 1
  LDFLAGS="$LDFLAGS i.o"
fi

echo '=> generate c++ code...'
perl -pe "s|SCRIPT_FILE_NAME|$1|g; s@SCRIPT_SHEBANG@$SHEBANG@g" "$DIR/main.cpp" >"$1.cpp" || exit 1

if [ -n "$EXPIRE_MESSAGE" ]; then
  if [ -f "$EXPIRE_MESSAGE" ]; then
    perl -pe "s|script has expired!|\`cat '$EXPIRE_MESSAGE'\`|ge" -i "$1.cpp" || exit 1
  else
    perl -pe "s|script has expired!|$EXPIRE_MESSAGE|g" -i "$1.cpp" || exit 1
  fi
fi

echo '=> compile c++ code...'
$CXX -I"$DIR" -std=$CXX_STANDARD $CXXFLAGS "$1.cpp" $LDFLAGS -o "$2" || exit 1
$STRIP "$2"

if [ -n "$SQUASHFS_DATA" ]; then
  echo '=> append squashfs to binary...'
  if [ -d "$SQUASHFS_DATA" ]; then
    mksquashfs "$SQUASHFS_DATA" d.squashfs -root-owned -noappend || exit
    cat d.squashfs >>"$2"
  else
    cat $SQUASHFS_DATA >>"$2"
  fi
fi

if [ -n "$VERIFY_CHECKSUM" ]; then
  echo '=> build crc32 tool...'
  g++ -std=$CXX_STANDARD -w "$DIR/crc32.cpp" -o crc32 || exit 1
  echo '=> write checksum to binary...'
  OFFSET="$(LC_ALL=C grep -abo ssccksum "$2" | grep -o '^[0-9]*')"
  CKSUM="$(./crc32 "$2")"
  #echo "offset=$OFFSET cksum=$CKSUM"
  perl -e "open(my \$fh,'+<','$2'); seek(\$fh,$OFFSET,0); print \$fh pack('V',$OFFSET),pack('V',$CKSUM)"
fi
